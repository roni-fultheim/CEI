includeConfig './TCGA_rna_editing.user_params.config'
docker.enabled = true



//  ---------------------> general params
// run title - will put all the results under directory with this name
params.run_title = "undefined"
// show help message
params.help = false
// should generate results for CEI (3'UTR editing) or AEI, default is CEI
params.CEI = true


// UUID list of GDC files to run on
params.gdc_UUID_list=''


// to set if your files are paired-end or single-end, and stranded or unstranded
profiles {
    SE {
        params.isPaired = false
    }
    PE {
        params.isPaired = true
    }

    stranded {
        params.isStranded = true
    }
    unstranded {
        params.isStranded = false
    }
}

// hg38 files
params.organism="homo sapiens"
params.assembly="hg38"
// General
params.refseq_file_relative = "Resources/RefSeqAnnotations/HomoSapiens/ucscHg38RefSeqCurated.bed.gz"
params.expression_file_relative = "Resources/GenesExpression/HomoSapiens/ucscHg38GTExGeneExpression.bed.gz"
params.genome_file_relative = "Resources/Genomes/HomoSapiens/ucscHg38Genome.fa"
params.snp_file_relative = "Resources/SNPs/HomoSapiens/ucscHg38CommonGenomicSNPs151.bed.gz"
// Index
params.regions_EI_relative = params.CEI ? "Resources/Regions/HomoSapiens/hg38.Alu3pUTR_minLen200_17022021.InvertedRepeatsIn3pUTR.sorted.merged.bed.gz" : "Resources/Regions/HomoSapiens/ucscHg38Alu.bed.gz"
params.genome_regions_index_EI_name = params.CEI ? "ucscHg38Genome.fa.hg38.Alu3pUTR_minLen200_17022021.InvertedRepeatsIn3pUTR.sorted.merged.bed.gz.GenomeIndex.jsd" : "ucscHg38Genome.fa.ucscHg38Alu.bed.gz.GenomeIndex.jsd"
params.genome_regions_index_EI_relative = "Resources/Regions/HomoSapiens/${params.genome_regions_index_EI_name}"


// ----------------------------------Full Paths - set full using relative paths above
// name of your dir in the bucket for nextflow for all files (see also params.mount_path)
params.mount_bucket_dir="main"
// for accessing the bucket directly from the machine in google batch, we can use the automatic bucket mounting
// (mount_bucket_dir was set above "main")
params.mount_path = "s3://${params.resources_bucket_name}/${params.mount_bucket_dir}"

params.refseq_file = "${params.mount_path}/${params.refseq_file_relative}"
// Expression for RNA editing index resource
params.expression_file = "${params.mount_path}/${params.expression_file_relative}"
// Genome resource
params.genome_file = "${params.mount_path}/${params.genome_file_relative}"
// SNPs resource
params.snp_file = "${params.mount_path}/${params.snp_file_relative}"
// Alu regions resource
params.regions_EI = "${params.mount_path}/${params.regions_EI_relative}"
// Alu regions index resource
params.genome_regions_index_EI = "${params.mount_path}/${params.genome_regions_index_EI_relative}"



// ----------------------------------------------- Results
params.EI_results_path_relative = "Results/EI_results/${params.run_title}"
params.results_mount_path = "s3://${params.results_bucket_name}/${params.mount_bucket_dir}"
params.EI_results_path = "${params.results_mount_path}/${params.EI_results_path_relative}"


process {
    errorStrategy = { ((task.attempt <9 && task.exitStatus == 143) || (task.attempt <4)) ? 'retry' : 'ignore' }
    maxRetries = 10
    maxErrors = 1000000
    
    withLabel:process_low {
        cpus = 1
        memory = { task.attempt > 1 ? '8 GB' : '8 GB' }
        // biggest TCGA samples are 40GB - in most cases 60 GB is fine
        disk = { task.attempt > 1 ? '80 GB' : '60 GB' } 
    }
    withLabel:process_medium {
        cpus = 4
        memory = { task.attempt > 1 ? '30 GB' : '22 GB' }
    }


    withLabel: run_batch {
        executor = 'awsbatch'
        queue ="$params.process_spot_queue"
    }

    withName:download {
        container = 'levanonlab/gdc-client:2.3.0'
    }
    withName:aluindex {
        container = 'levanonlab/rna-editing-index-lite:1.0'
    }
}

executor.submitRateLimit='60/1min'
executor {
  $awsbatch {
    queueSize = 300
    submitRateLimit='60/1min'
  }

  $local {
    cpus = 1
    memory = '1 GB'
  }
}


tower {
  accessToken = "$params.tower_access_token"
  workspaceId = "$params.workspace_id"
}

aws{
    client{
        endpoint = "https://s3.${params.ecr_region}.amazonaws.com"
        s3PathStyleAccess = true
    }
    region = params.ecr_region
    batch {
        platformType = 'fargate'
        jobRole = "$params.jobRole"
        executionRole = "$params.executionRole"
    }
}

wave.enabled = true
aws.batch.maxSpotAttempts = 0
